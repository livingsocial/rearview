# Common settings included in application.conf or application.conf.prod

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="WP2TNIhq6l>jf8;lk:[Af89?IbsTynKJ_IOO;Wx0NEBPj62eeo:@7C_mrlmbZLmU"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=rearview.Global

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver="com.mysql.jdbc.Driver"
db.default.url="jdbc:mysql://localhost:3306/rearview"
db.default.user="root"
db.default.password=""

# In order to reduce lock contention and thus improve performance,
# each incoming connection request picks off a connection from a
# pool that has thread-affinity.
# The higher this number, the better your performance will be for the
# case when you have plenty of short-lived threads.
# Beyond a certain threshold, maintenance of these pools will start
# to have a negative effect on performance (and only for the case
# when connections on a partition start running out).
db.default.partitionCount=2

# The number of connections to create per partition. Setting this to
# 5 with 3 partitions means you will have 15 unique connections to the
# database. Note that BoneCP will not create all these connections in
# one go but rather start off with minConnectionsPerPartition and
# gradually increase connections as required.
db.default.maxConnectionsPerPartition=5

# The number of initial connections, per partition.
db.default.minConnectionsPerPartition=5

# When the available connections are about to run out, BoneCP will
# dynamically create new ones in batches. This property controls
# how many new connections to create in one go (up to a maximum of
# maxConnectionsPerPartition). Note: This is a per-partition setting.
db.default.acquireIncrement=1

# After attempting to acquire a connection and failing, try to
# connect this number of times before giving up.
db.default.acquireRetryAttempts=10

# How long to wait before attempting to obtain a
# connection again after a failure.
db.default.acquireRetryDelay=5 seconds

# The maximum time to wait before a call
# to getConnection is timed out.
db.default.connectionTimeout=1 second

# Idle max age
db.default.idleMaxAge=10 minute

# This sets the time for a connection to remain idle before sending a test query to the DB.
# This is useful to prevent a DB from timing out connections on its end.
db.default.idleConnectionTestPeriod=5 minutes

# An initial SQL statement that is run only when
# a connection is first created.
db.default.initSQL="SELECT 1"

# If enabled, log SQL statements being executed.
db.default.logStatements=false

# The maximum connection age.
db.default.maxConnectionAge=1 hour

slick.db.driver=scala.slick.driver.MySQLDriver

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

applyEvolutions.default=true

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

access_logging=false

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Graphite
graphite.host="http://localhost:8080"
graphite.auth=""
graphite.timeout=10000

# Alerts
# ~~~~~~
# An array of class names to load on startup for alerting
alert.class_names = ["rearview.alert.LiveEmailAlert"]

# Enable alerts (Email, PagerDuty ..) for Graphite and other internal errors (disabled by default). 
# This means that alerts will only be sent when the monitor successfully runs and raises an alert. 
# Set the value to true to enable alerts in cases where the monitor fails to fetch data, times out 
# or when there is a security exception in the ruby sandbox
alert.on_errors=false

# pager duty
pagerduty.uri="https://events.pagerduty.com/generic/2010-04-15/create_event.json"

# Statsd
statsd.enabled=true
statsd.stat.prefix="rearview"
statsd.host="127.0.0.1"
statsd.port=8125

# Hostname used for generating links back to service
service.hostname="localhost:9000"

ruby.script="ruby/monitor.rb"
ruby.sandbox.timeout=5

# Email
email.from="rearview@livingsocial.com"
email.host="localhost"
email.port=25
email.user=""
email.password=""

# Tread lightly with these settings
internal-threadpool-size=4
iteratee-threadpool-size=4

play {
  akka {
    actor {

      default-dispatcher {
        fork-join-executor {
          parallelism-min = 2
          parallelism-max = 4
          parallelism-factor = 1.0
        }
      }

      actions-dispatcher = {
        fork-join-executor {
          parallelism-min = 2
          parallelism-max = 4
          parallelism-factor = 1.0
        }
      }

      websockets-dispatcher = {
        fork-join-executor {
          parallelism-factor = 1.0
          parallelism-min = 1
          parallelism-max = 2
        }
      }
    }
  }
}
